name: Publish NPM Package
on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm install
      
      - name: Check the version
        id: check
        run: |
            CURRENT_VERSION=$(jq -r .version package.json)
            echo "Current version: $CURRENT_VERSION"
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.8")
            echo "Latest tag: $LATEST_TAG"

            LATEST_VERSION=${LATEST_TAG#v}

            if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; 
            then
              echo "Version changed"
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            else
              echo "Version not changed"
              echo "version_changed=false" >> $GITHUB_OUTPUT
            fi
      - name: Setup npm auth
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Publish to NPM
        if: steps.check.outputs.version_changed == 'true'
        run: npm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      
      - name: Tag release
        if: steps.check.outputs.version_changed == 'true'
        run: |
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git tag -a "v${{ steps.check.outputs.new_version }}" -m "v${{ steps.check.outputs.new_version }}"
            git push origin "v${{ steps.check.outputs.new_version }}"

